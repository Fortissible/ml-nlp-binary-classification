# -*- coding: utf-8 -*-
"""ml-nlp-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ep47ezkGhRAiw2c89Ve1GMv865xnRvaz
"""

import pandas as pd
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn import preprocessing

movie_df = pd.read_csv("IMDB Dataset.csv", engine="python", error_bad_lines=False)
label_encoder = preprocessing.LabelEncoder()
movie_df['sentiment']= label_encoder.fit_transform(movie_df["sentiment"]) 
movie_df.head()

review = movie_df["review"].values
sentiment = movie_df["sentiment"].values
review_train, review_test, sentiment_train, sentiment_test = train_test_split(review, 
                                                                              sentiment, 
                                                                              test_size=0.2
                                                                              )

tokenizer = Tokenizer(num_words=1500,oov_token="_")
tokenizer.fit_on_texts(review_train)
tokenizer.fit_on_texts(review_test)

sequence_train = tokenizer.texts_to_sequences(review_train)
sequence_test = tokenizer.texts_to_sequences(review_test)

sequence_padded_train = pad_sequences(sequence_train)
sequence_padded_test = pad_sequences(sequence_test)
print(sequence_padded_train)
print(sequence_padded_test)

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=1500, output_dim=20),
    tf.keras.layers.LSTM(128),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.1),
    tf.keras.layers.Dense(8, activation='relu'),
    tf.keras.layers.Dropout(0.125),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
print(model.summary())

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.875 and logs.get('val_accuracy')>0.875):
      print("\nAkurasi telah mencapai >87.5%!")
      self.model.stop_training = True
callbacks = myCallback()

model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
num_epochs = 50
result = model.fit(sequence_padded_train, 
                    sentiment_train, 
                    steps_per_epoch=50,
                    validation_steps=10,
                    epochs=num_epochs, 
                    validation_data=(sequence_padded_test, sentiment_test), 
                    verbose=2,
                    callbacks=[callbacks]
                    )

"""Model mencapai akurasi latih dan validasi diatas 87.5% pada epoch ke-8"""

import matplotlib.pyplot as plt

plt.plot(result.history['loss'])
plt.plot(result.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','Validation'], loc='upper right')
plt.show()

plt.plot(result.history['accuracy'])
plt.plot(result.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Validation'], loc='lower right')
plt.show()